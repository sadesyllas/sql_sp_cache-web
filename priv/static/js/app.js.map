{"version":3,"sources":["d:/sql_sp_cache-web/node_modules/phoenix/priv/static/phoenix.js","d:/sql_sp_cache-web/node_modules/phoenix_html/priv/static/phoenix_html.js","d:/sql_sp_cache-web/web/static/js/socket.js","web/static/js/app.js","web/static/js/socket.js"],"names":["socket","params","token","window","userToken","statusToClass","statNameMap","byteSizes","b","k","m","g","t","p","e","z","y","byteSizeNames","getByteSizeDescription","byteSize","byteSizePerKind","reduce","acc","val","count","Math","floor","filter","bsn","map","toUpperCase","join","getDurationDescription","milliseconds","x","Date","setTime","getTime","getTimezoneOffset","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","foo","updateTime","document","getElementById","textContent","toISOString","updateStatus","status","statusElement","Array","from","classList","test","klass","forEach","remove","add","versionElement","version","heartbeat","makeCacheRow","cacheName","cache","tplt","querySelector","cloneNode","removeAttribute","header","innerHTML","pid","keys","Object","tr","createElement","tdCacheKey","tdCacheKeyClientsCount","key","appendChild","stats","statKeys","sort","tdKey","tdValue","statKey","round","connect","statsChannel","channel","receive","console","log","error","on","statsFailed","style","display","pushQueueLength","push_queue_length","cacheStatsLayout","cacheNames","caches","statNames","cacheStatsDomElements","cacheStatsDomElement","push","statsElement","children","child","node"],"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","file":"priv\\static\\js\\app.js","sourcesContent":["\nrequire.register(\"phoenix/priv/static/phoenix.js\", function(exports, require, module) {\n  require = __makeRelativeRequire(require, {}, \"phoenix\");\n  (function() {\n    (function(exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Phoenix Channels JavaScript client\n//\n// ## Socket Connection\n//\n// A single connection is established to the server and\n// channels are multiplexed over the connection.\n// Connect to the server using the `Socket` class:\n//\n//     let socket = new Socket(\"/ws\", {params: {userToken: \"123\"}})\n//     socket.connect()\n//\n// The `Socket` constructor takes the mount point of the socket,\n// the authentication params, as well as options that can be found in\n// the Socket docs, such as configuring the `LongPoll` transport, and\n// heartbeat.\n//\n// ## Channels\n//\n// Channels are isolated, concurrent processes on the server that\n// subscribe to topics and broker events between the client and server.\n// To join a channel, you must provide the topic, and channel params for\n// authorization. Here's an example chat room example where `\"new_msg\"`\n// events are listened for, messages are pushed to the server, and\n// the channel is joined with ok/error/timeout matches:\n//\n//     let channel = socket.channel(\"room:123\", {token: roomToken})\n//     channel.on(\"new_msg\", msg => console.log(\"Got message\", msg) )\n//     $input.onEnter( e => {\n//       channel.push(\"new_msg\", {body: e.target.val}, 10000)\n//        .receive(\"ok\", (msg) => console.log(\"created message\", msg) )\n//        .receive(\"error\", (reasons) => console.log(\"create failed\", reasons) )\n//        .receive(\"timeout\", () => console.log(\"Networking issue...\") )\n//     })\n//     channel.join()\n//       .receive(\"ok\", ({messages}) => console.log(\"catching up\", messages) )\n//       .receive(\"error\", ({reason}) => console.log(\"failed join\", reason) )\n//       .receive(\"timeout\", () => console.log(\"Networking issue. Still waiting...\") )\n//\n//\n// ## Joining\n//\n// Creating a channel with `socket.channel(topic, params)`, binds the params to\n// `channel.params`, which are sent up on `channel.join()`.\n// Subsequent rejoins will send up the modified params for\n// updating authorization params, or passing up last_message_id information.\n// Successful joins receive an \"ok\" status, while unsuccessful joins\n// receive \"error\".\n//\n// ## Duplicate Join Subscriptions\n//\n// While the client may join any number of topics on any number of channels,\n// the client may only hold a single subscription for each unique topic at any\n// given time. When attempting to create a duplicate subscription,\n// the server will close the existing channel, log a warning, and\n// spawn a new channel for the topic. The client will have their\n// `channel.onClose` callbacks fired for the existing channel, and the new\n// channel join will have its receive hooks processed as normal.\n//\n// ## Pushing Messages\n//\n// From the previous example, we can see that pushing messages to the server\n// can be done with `channel.push(eventName, payload)` and we can optionally\n// receive responses from the push. Additionally, we can use\n// `receive(\"timeout\", callback)` to abort waiting for our other `receive` hooks\n//  and take action after some period of waiting. The default timeout is 5000ms.\n//\n//\n// ## Socket Hooks\n//\n// Lifecycle events of the multiplexed connection can be hooked into via\n// `socket.onError()` and `socket.onClose()` events, ie:\n//\n//     socket.onError( () => console.log(\"there was an error with the connection!\") )\n//     socket.onClose( () => console.log(\"the connection dropped\") )\n//\n//\n// ## Channel Hooks\n//\n// For each joined channel, you can bind to `onError` and `onClose` events\n// to monitor the channel lifecycle, ie:\n//\n//     channel.onError( () => console.log(\"there was an error!\") )\n//     channel.onClose( () => console.log(\"the channel has gone away gracefully\") )\n//\n// ### onError hooks\n//\n// `onError` hooks are invoked if the socket connection drops, or the channel\n// crashes on the server. In either case, a channel rejoin is attempted\n// automatically in an exponential backoff manner.\n//\n// ### onClose hooks\n//\n// `onClose` hooks are invoked only in two cases. 1) the channel explicitly\n// closed on the server, or 2). The client explicitly closed, by calling\n// `channel.leave()`\n//\n//\n// ## Presence\n//\n// The `Presence` object provides features for syncing presence information\n// from the server with the client and handling presences joining and leaving.\n//\n// ### Syncing initial state from the server\n//\n// `Presence.syncState` is used to sync the list of presences on the server\n// with the client's state. An optional `onJoin` and `onLeave` callback can\n// be provided to react to changes in the client's local presences across\n// disconnects and reconnects with the server.\n//\n// `Presence.syncDiff` is used to sync a diff of presence join and leave\n// events from the server, as they happen. Like `syncState`, `syncDiff`\n// accepts optional `onJoin` and `onLeave` callbacks to react to a user\n// joining or leaving from a device.\n//\n// ### Listing Presences\n//\n// `Presence.list` is used to return a list of presence information\n// based on the local state of metadata. By default, all presence\n// metadata is returned, but a `listBy` function can be supplied to\n// allow the client to select which metadata to use for a given presence.\n// For example, you may have a user online from different devices with a\n// a metadata status of \"online\", but they have set themselves to \"away\"\n// on another device. In this case, they app may choose to use the \"away\"\n// status for what appears on the UI. The example below defines a `listBy`\n// function which prioritizes the first metadata which was registered for\n// each user. This could be the first tab they opened, or the first device\n// they came online from:\n//\n//     let state = {}\n//     state = Presence.syncState(state, stateFromServer)\n//     let listBy = (id, {metas: [first, ...rest]}) => {\n//       first.count = rest.length + 1 // count of this user's presences\n//       first.id = id\n//       return first\n//     }\n//     let onlineUsers = Presence.list(state, listBy)\n//\n//\n// ### Example Usage\n//\n//     // detect if user has joined for the 1st time or from another tab/device\n//     let onJoin = (id, current, newPres) => {\n//       if(!current){\n//         console.log(\"user has entered for the first time\", newPres)\n//       } else {\n//         console.log(\"user additional presence\", newPres)\n//       }\n//     }\n//     // detect if user has left from all tabs/devices, or is still present\n//     let onLeave = (id, current, leftPres) => {\n//       if(current.metas.length === 0){\n//         console.log(\"user has left from all devices\", leftPres)\n//       } else {\n//         console.log(\"user left from a device\", leftPres)\n//       }\n//     }\n//     let presences = {} // client's initial empty presence state\n//     // receive initial presence data from server, sent after join\n//     myChannel.on(\"presences\", state => {\n//       presences = Presence.syncState(presences, state, onJoin, onLeave)\n//       displayUsers(Presence.list(presences))\n//     })\n//     // receive \"presence_diff\" from server, containing join/leave events\n//     myChannel.on(\"presence_diff\", diff => {\n//       presences = Presence.syncDiff(presences, diff, onJoin, onLeave)\n//       this.setState({users: Presence.list(room.presences, listBy)})\n//     })\n//\nvar VSN = \"1.0.0\";\nvar SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };\nvar DEFAULT_TIMEOUT = 10000;\nvar CHANNEL_STATES = {\n  closed: \"closed\",\n  errored: \"errored\",\n  joined: \"joined\",\n  joining: \"joining\",\n  leaving: \"leaving\"\n};\nvar CHANNEL_EVENTS = {\n  close: \"phx_close\",\n  error: \"phx_error\",\n  join: \"phx_join\",\n  reply: \"phx_reply\",\n  leave: \"phx_leave\"\n};\nvar TRANSPORTS = {\n  longpoll: \"longpoll\",\n  websocket: \"websocket\"\n};\n\nvar Push = function () {\n\n  // Initializes the Push\n  //\n  // channel - The Channel\n  // event - The event, for example `\"phx_join\"`\n  // payload - The payload, for example `{user_id: 123}`\n  // timeout - The push timeout in milliseconds\n  //\n\n  function Push(channel, event, payload, timeout) {\n    _classCallCheck(this, Push);\n\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload || {};\n    this.receivedResp = null;\n    this.timeout = timeout;\n    this.timeoutTimer = null;\n    this.recHooks = [];\n    this.sent = false;\n  }\n\n  _createClass(Push, [{\n    key: \"resend\",\n    value: function resend(timeout) {\n      this.timeout = timeout;\n      this.cancelRefEvent();\n      this.ref = null;\n      this.refEvent = null;\n      this.receivedResp = null;\n      this.sent = false;\n      this.send();\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      if (this.hasReceived(\"timeout\")) {\n        return;\n      }\n      this.startTimeout();\n      this.sent = true;\n      this.channel.socket.push({\n        topic: this.channel.topic,\n        event: this.event,\n        payload: this.payload,\n        ref: this.ref\n      });\n    }\n  }, {\n    key: \"receive\",\n    value: function receive(status, callback) {\n      if (this.hasReceived(status)) {\n        callback(this.receivedResp.response);\n      }\n\n      this.recHooks.push({ status: status, callback: callback });\n      return this;\n    }\n\n    // private\n\n  }, {\n    key: \"matchReceive\",\n    value: function matchReceive(_ref) {\n      var status = _ref.status;\n      var response = _ref.response;\n      var ref = _ref.ref;\n\n      this.recHooks.filter(function (h) {\n        return h.status === status;\n      }).forEach(function (h) {\n        return h.callback(response);\n      });\n    }\n  }, {\n    key: \"cancelRefEvent\",\n    value: function cancelRefEvent() {\n      if (!this.refEvent) {\n        return;\n      }\n      this.channel.off(this.refEvent);\n    }\n  }, {\n    key: \"cancelTimeout\",\n    value: function cancelTimeout() {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = null;\n    }\n  }, {\n    key: \"startTimeout\",\n    value: function startTimeout() {\n      var _this = this;\n\n      if (this.timeoutTimer) {\n        return;\n      }\n      this.ref = this.channel.socket.makeRef();\n      this.refEvent = this.channel.replyEventName(this.ref);\n\n      this.channel.on(this.refEvent, function (payload) {\n        _this.cancelRefEvent();\n        _this.cancelTimeout();\n        _this.receivedResp = payload;\n        _this.matchReceive(payload);\n      });\n\n      this.timeoutTimer = setTimeout(function () {\n        _this.trigger(\"timeout\", {});\n      }, this.timeout);\n    }\n  }, {\n    key: \"hasReceived\",\n    value: function hasReceived(status) {\n      return this.receivedResp && this.receivedResp.status === status;\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(status, response) {\n      this.channel.trigger(this.refEvent, { status: status, response: response });\n    }\n  }]);\n\n  return Push;\n}();\n\nvar Channel = exports.Channel = function () {\n  function Channel(topic, params, socket) {\n    var _this2 = this;\n\n    _classCallCheck(this, Channel);\n\n    this.state = CHANNEL_STATES.closed;\n    this.topic = topic;\n    this.params = params || {};\n    this.socket = socket;\n    this.bindings = [];\n    this.timeout = this.socket.timeout;\n    this.joinedOnce = false;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.pushBuffer = [];\n    this.rejoinTimer = new Timer(function () {\n      return _this2.rejoinUntilConnected();\n    }, this.socket.reconnectAfterMs);\n    this.joinPush.receive(\"ok\", function () {\n      _this2.state = CHANNEL_STATES.joined;\n      _this2.rejoinTimer.reset();\n      _this2.pushBuffer.forEach(function (pushEvent) {\n        return pushEvent.send();\n      });\n      _this2.pushBuffer = [];\n    });\n    this.onClose(function () {\n      _this2.rejoinTimer.reset();\n      _this2.socket.log(\"channel\", \"close \" + _this2.topic + \" \" + _this2.joinRef());\n      _this2.state = CHANNEL_STATES.closed;\n      _this2.socket.remove(_this2);\n    });\n    this.onError(function (reason) {\n      if (_this2.isLeaving() || _this2.isClosed()) {\n        return;\n      }\n      _this2.socket.log(\"channel\", \"error \" + _this2.topic, reason);\n      _this2.state = CHANNEL_STATES.errored;\n      _this2.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive(\"timeout\", function () {\n      if (!_this2.isJoining()) {\n        return;\n      }\n      _this2.socket.log(\"channel\", \"timeout \" + _this2.topic, _this2.joinPush.timeout);\n      _this2.state = CHANNEL_STATES.errored;\n      _this2.rejoinTimer.scheduleTimeout();\n    });\n    this.on(CHANNEL_EVENTS.reply, function (payload, ref) {\n      _this2.trigger(_this2.replyEventName(ref), payload);\n    });\n  }\n\n  _createClass(Channel, [{\n    key: \"rejoinUntilConnected\",\n    value: function rejoinUntilConnected() {\n      this.rejoinTimer.scheduleTimeout();\n      if (this.socket.isConnected()) {\n        this.rejoin();\n      }\n    }\n  }, {\n    key: \"join\",\n    value: function join() {\n      var timeout = arguments.length <= 0 || arguments[0] === undefined ? this.timeout : arguments[0];\n\n      if (this.joinedOnce) {\n        throw \"tried to join multiple times. 'join' can only be called a single time per channel instance\";\n      } else {\n        this.joinedOnce = true;\n        this.rejoin(timeout);\n        return this.joinPush;\n      }\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this.on(CHANNEL_EVENTS.close, callback);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(callback) {\n      this.on(CHANNEL_EVENTS.error, function (reason) {\n        return callback(reason);\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      this.bindings.push({ event: event, callback: callback });\n    }\n  }, {\n    key: \"off\",\n    value: function off(event) {\n      this.bindings = this.bindings.filter(function (bind) {\n        return bind.event !== event;\n      });\n    }\n  }, {\n    key: \"canPush\",\n    value: function canPush() {\n      return this.socket.isConnected() && this.isJoined();\n    }\n  }, {\n    key: \"push\",\n    value: function push(event, payload) {\n      var timeout = arguments.length <= 2 || arguments[2] === undefined ? this.timeout : arguments[2];\n\n      if (!this.joinedOnce) {\n        throw \"tried to push '\" + event + \"' to '\" + this.topic + \"' before joining. Use channel.join() before pushing events\";\n      }\n      var pushEvent = new Push(this, event, payload, timeout);\n      if (this.canPush()) {\n        pushEvent.send();\n      } else {\n        pushEvent.startTimeout();\n        this.pushBuffer.push(pushEvent);\n      }\n\n      return pushEvent;\n    }\n\n    // Leaves the channel\n    //\n    // Unsubscribes from server events, and\n    // instructs channel to terminate on server\n    //\n    // Triggers onClose() hooks\n    //\n    // To receive leave acknowledgements, use the a `receive`\n    // hook to bind to the server ack, ie:\n    //\n    //     channel.leave().receive(\"ok\", () => alert(\"left!\") )\n    //\n\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      var _this3 = this;\n\n      var timeout = arguments.length <= 0 || arguments[0] === undefined ? this.timeout : arguments[0];\n\n      this.state = CHANNEL_STATES.leaving;\n      var onClose = function onClose() {\n        _this3.socket.log(\"channel\", \"leave \" + _this3.topic);\n        _this3.trigger(CHANNEL_EVENTS.close, \"leave\", _this3.joinRef());\n      };\n      var leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive(\"ok\", function () {\n        return onClose();\n      }).receive(\"timeout\", function () {\n        return onClose();\n      });\n      leavePush.send();\n      if (!this.canPush()) {\n        leavePush.trigger(\"ok\", {});\n      }\n\n      return leavePush;\n    }\n\n    // Overridable message hook\n    //\n    // Receives all events for specialized message handling\n    // before dispatching to the channel callbacks.\n    //\n    // Must return the payload, modified or unmodified\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event, payload, ref) {\n      return payload;\n    }\n\n    // private\n\n  }, {\n    key: \"isMember\",\n    value: function isMember(topic) {\n      return this.topic === topic;\n    }\n  }, {\n    key: \"joinRef\",\n    value: function joinRef() {\n      return this.joinPush.ref;\n    }\n  }, {\n    key: \"sendJoin\",\n    value: function sendJoin(timeout) {\n      this.state = CHANNEL_STATES.joining;\n      this.joinPush.resend(timeout);\n    }\n  }, {\n    key: \"rejoin\",\n    value: function rejoin() {\n      var timeout = arguments.length <= 0 || arguments[0] === undefined ? this.timeout : arguments[0];\n      if (this.isLeaving()) {\n        return;\n      }\n      this.sendJoin(timeout);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(event, payload, ref) {\n      var close = CHANNEL_EVENTS.close;\n      var error = CHANNEL_EVENTS.error;\n      var leave = CHANNEL_EVENTS.leave;\n      var join = CHANNEL_EVENTS.join;\n\n      if (ref && [close, error, leave, join].indexOf(event) >= 0 && ref !== this.joinRef()) {\n        return;\n      }\n      var handledPayload = this.onMessage(event, payload, ref);\n      if (payload && !handledPayload) {\n        throw \"channel onMessage callbacks must return the payload, modified or unmodified\";\n      }\n\n      this.bindings.filter(function (bind) {\n        return bind.event === event;\n      }).map(function (bind) {\n        return bind.callback(handledPayload, ref);\n      });\n    }\n  }, {\n    key: \"replyEventName\",\n    value: function replyEventName(ref) {\n      return \"chan_reply_\" + ref;\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this.state === CHANNEL_STATES.closed;\n    }\n  }, {\n    key: \"isErrored\",\n    value: function isErrored() {\n      return this.state === CHANNEL_STATES.errored;\n    }\n  }, {\n    key: \"isJoined\",\n    value: function isJoined() {\n      return this.state === CHANNEL_STATES.joined;\n    }\n  }, {\n    key: \"isJoining\",\n    value: function isJoining() {\n      return this.state === CHANNEL_STATES.joining;\n    }\n  }, {\n    key: \"isLeaving\",\n    value: function isLeaving() {\n      return this.state === CHANNEL_STATES.leaving;\n    }\n  }]);\n\n  return Channel;\n}();\n\nvar Socket = exports.Socket = function () {\n\n  // Initializes the Socket\n  //\n  // endPoint - The string WebSocket endpoint, ie, \"ws://example.com/ws\",\n  //                                               \"wss://example.com\"\n  //                                               \"/ws\" (inherited host & protocol)\n  // opts - Optional configuration\n  //   transport - The Websocket Transport, for example WebSocket or Phoenix.LongPoll.\n  //               Defaults to WebSocket with automatic LongPoll fallback.\n  //   timeout - The default timeout in milliseconds to trigger push timeouts.\n  //             Defaults `DEFAULT_TIMEOUT`\n  //   heartbeatIntervalMs - The millisec interval to send a heartbeat message\n  //   reconnectAfterMs - The optional function that returns the millsec\n  //                      reconnect interval. Defaults to stepped backoff of:\n  //\n  //     function(tries){\n  //       return [1000, 5000, 10000][tries - 1] || 10000\n  //     }\n  //\n  //   logger - The optional function for specialized logging, ie:\n  //     `logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n  //\n  //   longpollerTimeout - The maximum timeout of a long poll AJAX request.\n  //                        Defaults to 20s (double the server long poll timer).\n  //\n  //   params - The optional params to pass when connecting\n  //\n  // For IE8 support use an ES5-shim (https://github.com/es-shims/es5-shim)\n  //\n\n  function Socket(endPoint) {\n    var _this4 = this;\n\n    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, Socket);\n\n    this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };\n    this.channels = [];\n    this.sendBuffer = [];\n    this.ref = 0;\n    this.timeout = opts.timeout || DEFAULT_TIMEOUT;\n    this.transport = opts.transport || window.WebSocket || LongPoll;\n    this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 30000;\n    this.reconnectAfterMs = opts.reconnectAfterMs || function (tries) {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.logger = opts.logger || function () {}; // noop\n    this.longpollerTimeout = opts.longpollerTimeout || 20000;\n    this.params = opts.params || {};\n    this.endPoint = endPoint + \"/\" + TRANSPORTS.websocket;\n    this.reconnectTimer = new Timer(function () {\n      _this4.disconnect(function () {\n        return _this4.connect();\n      });\n    }, this.reconnectAfterMs);\n  }\n\n  _createClass(Socket, [{\n    key: \"protocol\",\n    value: function protocol() {\n      return location.protocol.match(/^https/) ? \"wss\" : \"ws\";\n    }\n  }, {\n    key: \"endPointURL\",\n    value: function endPointURL() {\n      var uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params), { vsn: VSN });\n      if (uri.charAt(0) !== \"/\") {\n        return uri;\n      }\n      if (uri.charAt(1) === \"/\") {\n        return this.protocol() + \":\" + uri;\n      }\n\n      return this.protocol() + \"://\" + location.host + uri;\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(callback, code, reason) {\n      if (this.conn) {\n        this.conn.onclose = function () {}; // noop\n        if (code) {\n          this.conn.close(code, reason || \"\");\n        } else {\n          this.conn.close();\n        }\n        this.conn = null;\n      }\n      callback && callback();\n    }\n\n    // params - The params to send when connecting, for example `{user_id: userToken}`\n\n  }, {\n    key: \"connect\",\n    value: function connect(params) {\n      var _this5 = this;\n\n      if (params) {\n        console && console.log(\"passing params to connect is deprecated. Instead pass :params to the Socket constructor\");\n        this.params = params;\n      }\n      if (this.conn) {\n        return;\n      }\n\n      this.conn = new this.transport(this.endPointURL());\n      this.conn.timeout = this.longpollerTimeout;\n      this.conn.onopen = function () {\n        return _this5.onConnOpen();\n      };\n      this.conn.onerror = function (error) {\n        return _this5.onConnError(error);\n      };\n      this.conn.onmessage = function (event) {\n        return _this5.onConnMessage(event);\n      };\n      this.conn.onclose = function (event) {\n        return _this5.onConnClose(event);\n      };\n    }\n\n    // Logs the message. Override `this.logger` for specialized logging. noops by default\n\n  }, {\n    key: \"log\",\n    value: function log(kind, msg, data) {\n      this.logger(kind, msg, data);\n    }\n\n    // Registers callbacks for connection state change events\n    //\n    // Examples\n    //\n    //    socket.onError(function(error){ alert(\"An error occurred\") })\n    //\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen(callback) {\n      this.stateChangeCallbacks.open.push(callback);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this.stateChangeCallbacks.close.push(callback);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(callback) {\n      this.stateChangeCallbacks.error.push(callback);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(callback) {\n      this.stateChangeCallbacks.message.push(callback);\n    }\n  }, {\n    key: \"onConnOpen\",\n    value: function onConnOpen() {\n      var _this6 = this;\n\n      this.log(\"transport\", \"connected to \" + this.endPointURL(), this.transport.prototype);\n      this.flushSendBuffer();\n      this.reconnectTimer.reset();\n      if (!this.conn.skipHeartbeat) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(function () {\n          return _this6.sendHeartbeat();\n        }, this.heartbeatIntervalMs);\n      }\n      this.stateChangeCallbacks.open.forEach(function (callback) {\n        return callback();\n      });\n    }\n  }, {\n    key: \"onConnClose\",\n    value: function onConnClose(event) {\n      this.log(\"transport\", \"close\", event);\n      this.triggerChanError();\n      clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.scheduleTimeout();\n      this.stateChangeCallbacks.close.forEach(function (callback) {\n        return callback(event);\n      });\n    }\n  }, {\n    key: \"onConnError\",\n    value: function onConnError(error) {\n      this.log(\"transport\", error);\n      this.triggerChanError();\n      this.stateChangeCallbacks.error.forEach(function (callback) {\n        return callback(error);\n      });\n    }\n  }, {\n    key: \"triggerChanError\",\n    value: function triggerChanError() {\n      this.channels.forEach(function (channel) {\n        return channel.trigger(CHANNEL_EVENTS.error);\n      });\n    }\n  }, {\n    key: \"connectionState\",\n    value: function connectionState() {\n      switch (this.conn && this.conn.readyState) {\n        case SOCKET_STATES.connecting:\n          return \"connecting\";\n        case SOCKET_STATES.open:\n          return \"open\";\n        case SOCKET_STATES.closing:\n          return \"closing\";\n        default:\n          return \"closed\";\n      }\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this.connectionState() === \"open\";\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(channel) {\n      this.channels = this.channels.filter(function (c) {\n        return c.joinRef() !== channel.joinRef();\n      });\n    }\n  }, {\n    key: \"channel\",\n    value: function channel(topic) {\n      var chanParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var chan = new Channel(topic, chanParams, this);\n      this.channels.push(chan);\n      return chan;\n    }\n  }, {\n    key: \"push\",\n    value: function push(data) {\n      var _this7 = this;\n\n      var topic = data.topic;\n      var event = data.event;\n      var payload = data.payload;\n      var ref = data.ref;\n\n      var callback = function callback() {\n        return _this7.conn.send(JSON.stringify(data));\n      };\n      this.log(\"push\", topic + \" \" + event + \" (\" + ref + \")\", payload);\n      if (this.isConnected()) {\n        callback();\n      } else {\n        this.sendBuffer.push(callback);\n      }\n    }\n\n    // Return the next message ref, accounting for overflows\n\n  }, {\n    key: \"makeRef\",\n    value: function makeRef() {\n      var newRef = this.ref + 1;\n      if (newRef === this.ref) {\n        this.ref = 0;\n      } else {\n        this.ref = newRef;\n      }\n\n      return this.ref.toString();\n    }\n  }, {\n    key: \"sendHeartbeat\",\n    value: function sendHeartbeat() {\n      if (!this.isConnected()) {\n        return;\n      }\n      this.push({ topic: \"phoenix\", event: \"heartbeat\", payload: {}, ref: this.makeRef() });\n    }\n  }, {\n    key: \"flushSendBuffer\",\n    value: function flushSendBuffer() {\n      if (this.isConnected() && this.sendBuffer.length > 0) {\n        this.sendBuffer.forEach(function (callback) {\n          return callback();\n        });\n        this.sendBuffer = [];\n      }\n    }\n  }, {\n    key: \"onConnMessage\",\n    value: function onConnMessage(rawMessage) {\n      var msg = JSON.parse(rawMessage.data);\n      var topic = msg.topic;\n      var event = msg.event;\n      var payload = msg.payload;\n      var ref = msg.ref;\n\n      this.log(\"receive\", (payload.status || \"\") + \" \" + topic + \" \" + event + \" \" + (ref && \"(\" + ref + \")\" || \"\"), payload);\n      this.channels.filter(function (channel) {\n        return channel.isMember(topic);\n      }).forEach(function (channel) {\n        return channel.trigger(event, payload, ref);\n      });\n      this.stateChangeCallbacks.message.forEach(function (callback) {\n        return callback(msg);\n      });\n    }\n  }]);\n\n  return Socket;\n}();\n\nvar LongPoll = exports.LongPoll = function () {\n  function LongPoll(endPoint) {\n    _classCallCheck(this, LongPoll);\n\n    this.endPoint = null;\n    this.token = null;\n    this.skipHeartbeat = true;\n    this.onopen = function () {}; // noop\n    this.onerror = function () {}; // noop\n    this.onmessage = function () {}; // noop\n    this.onclose = function () {}; // noop\n    this.pollEndpoint = this.normalizeEndpoint(endPoint);\n    this.readyState = SOCKET_STATES.connecting;\n\n    this.poll();\n  }\n\n  _createClass(LongPoll, [{\n    key: \"normalizeEndpoint\",\n    value: function normalizeEndpoint(endPoint) {\n      return endPoint.replace(\"ws://\", \"http://\").replace(\"wss://\", \"https://\").replace(new RegExp(\"(.*)\\/\" + TRANSPORTS.websocket), \"$1/\" + TRANSPORTS.longpoll);\n    }\n  }, {\n    key: \"endpointURL\",\n    value: function endpointURL() {\n      return Ajax.appendParams(this.pollEndpoint, { token: this.token });\n    }\n  }, {\n    key: \"closeAndRetry\",\n    value: function closeAndRetry() {\n      this.close();\n      this.readyState = SOCKET_STATES.connecting;\n    }\n  }, {\n    key: \"ontimeout\",\n    value: function ontimeout() {\n      this.onerror(\"timeout\");\n      this.closeAndRetry();\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var _this8 = this;\n\n      if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {\n        return;\n      }\n\n      Ajax.request(\"GET\", this.endpointURL(), \"application/json\", null, this.timeout, this.ontimeout.bind(this), function (resp) {\n        if (resp) {\n          var status = resp.status;\n          var token = resp.token;\n          var messages = resp.messages;\n\n          _this8.token = token;\n        } else {\n          var status = 0;\n        }\n\n        switch (status) {\n          case 200:\n            messages.forEach(function (msg) {\n              return _this8.onmessage({ data: JSON.stringify(msg) });\n            });\n            _this8.poll();\n            break;\n          case 204:\n            _this8.poll();\n            break;\n          case 410:\n            _this8.readyState = SOCKET_STATES.open;\n            _this8.onopen();\n            _this8.poll();\n            break;\n          case 0:\n          case 500:\n            _this8.onerror();\n            _this8.closeAndRetry();\n            break;\n          default:\n            throw \"unhandled poll status \" + status;\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(body) {\n      var _this9 = this;\n\n      Ajax.request(\"POST\", this.endpointURL(), \"application/json\", body, this.timeout, this.onerror.bind(this, \"timeout\"), function (resp) {\n        if (!resp || resp.status !== 200) {\n          _this9.onerror(status);\n          _this9.closeAndRetry();\n        }\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.readyState = SOCKET_STATES.closed;\n      this.onclose();\n    }\n  }]);\n\n  return LongPoll;\n}();\n\nvar Ajax = exports.Ajax = function () {\n  function Ajax() {\n    _classCallCheck(this, Ajax);\n  }\n\n  _createClass(Ajax, null, [{\n    key: \"request\",\n    value: function request(method, endPoint, accept, body, timeout, ontimeout, callback) {\n      if (window.XDomainRequest) {\n        var req = new XDomainRequest(); // IE8, IE9\n        this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);\n      } else {\n        var req = window.XMLHttpRequest ? new XMLHttpRequest() : // IE7+, Firefox, Chrome, Opera, Safari\n        new ActiveXObject(\"Microsoft.XMLHTTP\"); // IE6, IE5\n        this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);\n      }\n    }\n  }, {\n    key: \"xdomainRequest\",\n    value: function xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {\n      var _this10 = this;\n\n      req.timeout = timeout;\n      req.open(method, endPoint);\n      req.onload = function () {\n        var response = _this10.parseJSON(req.responseText);\n        callback && callback(response);\n      };\n      if (ontimeout) {\n        req.ontimeout = ontimeout;\n      }\n\n      // Work around bug in IE9 that requires an attached onprogress handler\n      req.onprogress = function () {};\n\n      req.send(body);\n    }\n  }, {\n    key: \"xhrRequest\",\n    value: function xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {\n      var _this11 = this;\n\n      req.timeout = timeout;\n      req.open(method, endPoint, true);\n      req.setRequestHeader(\"Content-Type\", accept);\n      req.onerror = function () {\n        callback && callback(null);\n      };\n      req.onreadystatechange = function () {\n        if (req.readyState === _this11.states.complete && callback) {\n          var response = _this11.parseJSON(req.responseText);\n          callback(response);\n        }\n      };\n      if (ontimeout) {\n        req.ontimeout = ontimeout;\n      }\n\n      req.send(body);\n    }\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(resp) {\n      return resp && resp !== \"\" ? JSON.parse(resp) : null;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(obj, parentKey) {\n      var queryStr = [];\n      for (var key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n          continue;\n        }\n        var paramKey = parentKey ? parentKey + \"[\" + key + \"]\" : key;\n        var paramVal = obj[key];\n        if ((typeof paramVal === \"undefined\" ? \"undefined\" : _typeof(paramVal)) === \"object\") {\n          queryStr.push(this.serialize(paramVal, paramKey));\n        } else {\n          queryStr.push(encodeURIComponent(paramKey) + \"=\" + encodeURIComponent(paramVal));\n        }\n      }\n      return queryStr.join(\"&\");\n    }\n  }, {\n    key: \"appendParams\",\n    value: function appendParams(url, params) {\n      if (Object.keys(params).length === 0) {\n        return url;\n      }\n\n      var prefix = url.match(/\\?/) ? \"&\" : \"?\";\n      return \"\" + url + prefix + this.serialize(params);\n    }\n  }]);\n\n  return Ajax;\n}();\n\nAjax.states = { complete: 4 };\n\nvar Presence = exports.Presence = {\n  syncState: function syncState(currentState, newState, onJoin, onLeave) {\n    var _this12 = this;\n\n    var state = this.clone(currentState);\n    var joins = {};\n    var leaves = {};\n\n    this.map(state, function (key, presence) {\n      if (!newState[key]) {\n        leaves[key] = presence;\n      }\n    });\n    this.map(newState, function (key, newPresence) {\n      var currentPresence = state[key];\n      if (currentPresence) {\n        (function () {\n          var newRefs = newPresence.metas.map(function (m) {\n            return m.phx_ref;\n          });\n          var curRefs = currentPresence.metas.map(function (m) {\n            return m.phx_ref;\n          });\n          var joinedMetas = newPresence.metas.filter(function (m) {\n            return curRefs.indexOf(m.phx_ref) < 0;\n          });\n          var leftMetas = currentPresence.metas.filter(function (m) {\n            return newRefs.indexOf(m.phx_ref) < 0;\n          });\n          if (joinedMetas.length > 0) {\n            joins[key] = newPresence;\n            joins[key].metas = joinedMetas;\n          }\n          if (leftMetas.length > 0) {\n            leaves[key] = _this12.clone(currentPresence);\n            leaves[key].metas = leftMetas;\n          }\n        })();\n      } else {\n        joins[key] = newPresence;\n      }\n    });\n    return this.syncDiff(state, { joins: joins, leaves: leaves }, onJoin, onLeave);\n  },\n  syncDiff: function syncDiff(currentState, _ref2, onJoin, onLeave) {\n    var joins = _ref2.joins;\n    var leaves = _ref2.leaves;\n\n    var state = this.clone(currentState);\n    if (!onJoin) {\n      onJoin = function onJoin() {};\n    }\n    if (!onLeave) {\n      onLeave = function onLeave() {};\n    }\n\n    this.map(joins, function (key, newPresence) {\n      var currentPresence = state[key];\n      state[key] = newPresence;\n      if (currentPresence) {\n        var _state$key$metas;\n\n        (_state$key$metas = state[key].metas).unshift.apply(_state$key$metas, _toConsumableArray(currentPresence.metas));\n      }\n      onJoin(key, currentPresence, newPresence);\n    });\n    this.map(leaves, function (key, leftPresence) {\n      var currentPresence = state[key];\n      if (!currentPresence) {\n        return;\n      }\n      var refsToRemove = leftPresence.metas.map(function (m) {\n        return m.phx_ref;\n      });\n      currentPresence.metas = currentPresence.metas.filter(function (p) {\n        return refsToRemove.indexOf(p.phx_ref) < 0;\n      });\n      onLeave(key, currentPresence, leftPresence);\n      if (currentPresence.metas.length === 0) {\n        delete state[key];\n      }\n    });\n    return state;\n  },\n  list: function list(presences, chooser) {\n    if (!chooser) {\n      chooser = function chooser(key, pres) {\n        return pres;\n      };\n    }\n\n    return this.map(presences, function (key, presence) {\n      return chooser(key, presence);\n    });\n  },\n\n  // private\n\n  map: function map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(function (key) {\n      return func(key, obj[key]);\n    });\n  },\n  clone: function clone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n};\n\n// Creates a timer that accepts a `timerCalc` function to perform\n// calculated timeout retries, such as exponential backoff.\n//\n// ## Examples\n//\n//    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n//      return [1000, 5000, 10000][tries - 1] || 10000\n//    })\n//    reconnectTimer.scheduleTimeout() // fires after 1000\n//    reconnectTimer.scheduleTimeout() // fires after 5000\n//    reconnectTimer.reset()\n//    reconnectTimer.scheduleTimeout() // fires after 1000\n//\n\nvar Timer = function () {\n  function Timer(callback, timerCalc) {\n    _classCallCheck(this, Timer);\n\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = null;\n    this.tries = 0;\n  }\n\n  _createClass(Timer, [{\n    key: \"reset\",\n    value: function reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    }\n\n    // Cancels any previous scheduleTimeout and schedules callback\n\n  }, {\n    key: \"scheduleTimeout\",\n    value: function scheduleTimeout() {\n      var _this13 = this;\n\n      clearTimeout(this.timer);\n\n      this.timer = setTimeout(function () {\n        _this13.tries = _this13.tries + 1;\n        _this13.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n  }]);\n\n  return Timer;\n}();\n\n})(typeof(exports) === \"undefined\" ? window.Phoenix = window.Phoenix || {} : exports);\n  })();\n});","\nrequire.register(\"phoenix_html/priv/static/phoenix_html.js\", function(exports, require, module) {\n  require = __makeRelativeRequire(require, {}, \"phoenix_html\");\n  (function() {\n    'use strict';\n\nfunction isLinkToSubmitParent(element) {\n  var isLinkTag = element.tagName === 'A';\n  var shouldSubmitParent = element.getAttribute('data-submit') === 'parent';\n\n  return isLinkTag && shouldSubmitParent;\n}\n\nfunction getClosestForm(element) {\n  while (element && element !== document && element.nodeType === Node.ELEMENT_NODE) {\n    if (element.tagName === 'FORM') {\n      return element;\n    }\n    element = element.parentNode;\n  }\n  return null;\n}\n\nfunction didHandleSubmitLinkClick(element) {\n  while (element && element.getAttribute) {\n    if (isLinkToSubmitParent(element)) {\n      var message = element.getAttribute('data-confirm');\n      if (message === null || confirm(message)) {\n        getClosestForm(element).submit();\n      }\n      return true;\n    } else {\n      element = element.parentNode;\n    }\n  }\n  return false;\n}\n\nwindow.addEventListener('click', function (event) {\n  if (event.target && didHandleSubmitLinkClick(event.target)) {\n    event.preventDefault();\n    return false;\n  }\n}, false);\n  })();\n});","// NOTE: The contents of this file will only be executed if\n// you uncomment its entry in \"web/static/js/app.js\".\n\n// To use Phoenix channels, the first step is to import Socket\n// and connect at the socket path in \"lib/my_app/endpoint.ex\":\nimport {Socket} from \"phoenix\"\n\nlet socket = new Socket(\"/socket\", {params: {token: window.userToken}})\n\n// When you connect, you'll often need to authenticate the client.\n// For example, imagine you have an authentication plug, `MyAuth`,\n// which authenticates the session and assigns a `:current_user`.\n// If the current user exists you can assign the user's token in\n// the connection for use in the layout.\n//\n// In your \"web/router.ex\":\n//\n//     pipeline :browser do\n//       ...\n//       plug MyAuth\n//       plug :put_user_token\n//     end\n//\n//     defp put_user_token(conn, _) do\n//       if current_user = conn.assigns[:current_user] do\n//         token = Phoenix.Token.sign(conn, \"user socket\", current_user.id)\n//         assign(conn, :user_token, token)\n//       else\n//         conn\n//       end\n//     end\n// Now you need to pass this token to JavaScript. You can do so\n// inside a script tag in \"web/templates/layout/app.html.eex\":\n//\n//     <script>window.userToken = \"<%= assigns[:user_token] %>\";</script>\n//\n// You will need to verify the user token in the \"connect/2\" function\n// in \"web/channels/user_socket.ex\":\n//\n//     def connect(%{\"token\" => token}, socket) do\n//       # max_age: 1209600 is equivalent to two weeks in seconds\n//       case Phoenix.Token.verify(socket, \"user socket\", token, max_age: 1209600) do\n//         {:ok, user_id} ->\n//           {:ok, assign(socket, :user, user_id)}\n//         {:error, reason} ->\n//           :error\n//       end\n//     end\n//\n// Finally, pass the token on connect as below. Or remove it\n// from connect if you don't care about authentication.\n\nconst statusToClass = {\n  'green': 'bg-success',\n  'red': 'bg-danger',\n};\n\nconst statNameMap = {\n  'push_queue_length': 'Push queue length',\n  'byte_size': 'Size',\n  'db_fetch_count': 'Query count',\n  'db_fetch_duration': 'Total query duration',\n  'db_fetch_mean_duration': 'Mean query duration',\n};\n\nconst byteSizes = {};\nbyteSizes.b = 1;\nbyteSizes.k = byteSizes.b * 1024;\nbyteSizes.m = byteSizes.k * 1024;\nbyteSizes.g = byteSizes.m * 1024;\nbyteSizes.t = byteSizes.g * 1024;\nbyteSizes.p = byteSizes.t * 1024;\nbyteSizes.e = byteSizes.p * 1024;\nbyteSizes.z = byteSizes.e * 1024;\nbyteSizes.y = byteSizes.z * 1024;\nconst byteSizeNames = ['y', 'z', 'e', 'p', 't', 'g', 'm', 'k', 'b'];\n\nfunction getByteSizeDescription(byteSize) {\n  const byteSizePerKind = byteSizeNames.reduce((acc, val) => {\n    const count = Math.floor(byteSize / byteSizes[val]);\n    acc[val] = count;\n    byteSize = byteSize - (count * byteSizes[val]);\n    return acc;\n  }, {});\n  return byteSizeNames\n    .filter(bsn => byteSizePerKind[bsn])\n    .map(bsn => `${byteSizePerKind[bsn]}${bsn.toUpperCase()}`)\n    .join('+');\n};\n\nfunction getDurationDescription(milliseconds) {\n  const x = new Date(0);\n  x.setTime(x.getTime() + (x.getTimezoneOffset() * 60000));\n  x.setTime(x.getTime() + milliseconds);\n  return [\n    x.getFullYear() != 1970 ? `${x.getFullYear() - 1970}Y` : '',\n    x.getMonth() != 0 ? `${x.getMonth()}M` : '',\n    x.getDate() != 1 ? `${x.getDate() - 1}D` : '',\n    x.getHours() != 0 ? `${x.getHours()}H` : '',\n    x.getMinutes() != 0 ? `${x.getMinutes()}m` : '',\n    x.getSeconds() != 0 ? `${x.getSeconds()}s` : '',\n    x.getMilliseconds() != 0 ? `${x.getMilliseconds()}ms` : '',\n  ].filter(x => x).join('+');\n}\n\nwindow.foo = getDurationDescription;\n\nfunction updateTime() {\n  document.getElementById('time').textContent = new Date().toISOString();\n}\n\nfunction updateStatus(status) {\n  const statusElement = document.getElementById('status');\n  Array.from(statusElement.classList)\n    .filter(klass => /^bg-/.test(klass))\n    .forEach(klass => statusElement.classList.remove(klass));\n  statusElement.classList.add(statusToClass[status.status]);\n\n  const versionElement = document.getElementById('cache-version');\n  const version = (status.heartbeat || {}).version;\n  versionElement.textContent = version ? `v${version}` : '-';\n}\n\nfunction makeCacheRow(cacheName, cache) {\n  const tplt = document\n    .querySelector('[data-template=\"cache-row-template\"]')\n    .cloneNode(true);\n  tplt.removeAttribute('data-template');\n\n  const header = tplt.querySelector('[data-template-role=\"header\"]');\n  header.removeAttribute('data-template-role');\n  header.innerHTML = `${cacheName} (pid: <em>${cache.pid}</em>)`;\n\n  const keys = tplt.querySelector('[data-template-role=\"keys\"]');\n  keys.removeAttribute('data-template-role');\n  Object.keys(cache.keys || {}).forEach(key => {\n    const tr = document.createElement('tr');\n    const tdCacheKey = document.createElement('td');\n    const tdCacheKeyClientsCount = document.createElement('td');\n    tdCacheKey.textContent = key;\n    tdCacheKeyClientsCount.textContent = cache.keys[key];\n    tr.appendChild(tdCacheKey);\n    tr.appendChild(tdCacheKeyClientsCount);\n    keys.appendChild(tr);\n  });\n\n  const stats = tplt.querySelector('[data-template-role=\"stats\"]');\n  keys.removeAttribute('data-template-role');\n  const statKeys = Object.keys(cache.stats || {});\n  statKeys.sort();\n  statKeys.forEach(statKey => {\n    const tr = document.createElement('tr');\n    const tdKey = document.createElement('td');\n    const tdValue = document.createElement('td');\n    tdKey.textContent = statNameMap[statKey];\n    if (statKey === 'byte_size') {\n      tdValue.textContent = getByteSizeDescription(cache.stats[statKey]);\n    } else if (statKey === 'db_fetch_duration' || statKey === 'db_fetch_mean_duration') {\n      tdValue.textContent = getDurationDescription(Math.round(cache.stats[statKey]));\n    } else {\n      tdValue.textContent = cache.stats[statKey];\n    }\n    tr.appendChild(tdKey);\n    tr.appendChild(tdValue);\n    stats.appendChild(tr);\n  });\n\n  return tplt;\n}\n\nsocket.connect()\n\n// Now that you are connected, you can join channels with a topic:\nconst statsChannel = socket.channel(\"stats:all\", null);\n\nstatsChannel\n  .join()\n  .receive(\"ok\", _ => console.log('joined the stats channel successfully'))\n  .receive(\"error\", _ => console.error('unable to join the stats channel'))\n\nstatsChannel.on(\"heartbeat\", heartbeat => {\n  updateTime();\n  updateStatus(heartbeat);\n});\n\nstatsChannel.on(\"stats\", stats => {\n  updateTime();\n\n  const statsFailed = document.getElementById('statsFailed');\n\n  if (stats.status !== 'green') {\n    statsFailed.style.display = '';\n    return;\n  }\n\n  statsFailed.style.display = 'none';\n\n  stats = stats.stats;\n\n  const pushQueueLength = document.getElementById('pushQueueLength');\n  pushQueueLength.textContent = stats.push_queue_length;\n\n  const cacheStatsLayout = {};\n  const cacheNames = Object.keys(stats.caches);\n\n  cacheNames.sort();\n\n  cacheNames.forEach(cacheName => {\n    const cache = stats.caches[cacheName];\n    const statNames = Object.keys(cache);\n    statNames.sort();\n\n    cacheStatsLayout[cacheName] = statNames;\n  });\n\n  const cacheStatsDomElements = [];\n\n  Object.keys(cacheStatsLayout).forEach(cacheName => {\n    const cacheStatsDomElement = makeCacheRow(cacheName, stats.caches[cacheName]);\n    cacheStatsDomElements.push(cacheStatsDomElement);\n  });\n\n  const statsElement = document.getElementById('stats');\n  Array.from(statsElement.children).forEach(child => child.remove());\n  cacheStatsDomElements.forEach(node => {\n    node.style.display = '';\n    statsElement.appendChild(node);\n  });\n});\n\nstatsChannel.push('poll', null);\n\nexport default socket\n","// Brunch automatically concatenates all files in your\r\n// watched paths. Those paths can be configured at\r\n// config.paths.watched in \"brunch-config.js\".\r\n//\r\n// However, those files will only be executed if\r\n// explicitly imported. The only exception are files\r\n// in vendor, which are never wrapped in imports and\r\n// therefore are always executed.\r\n\r\n// Import dependencies\r\n//\r\n// If you no longer want to use a dependency, remember\r\n// to also remove its path from \"config.paths.watched\".\r\nimport \"phoenix_html\"\r\n\r\n// Import local files\r\n//\r\n// Local files can be imported directly using relative\r\n// paths \"./socket\" or full ones \"web/static/js/socket\".\r\n\r\nimport socket from \"./socket\"\r\n","// NOTE: The contents of this file will only be executed if\n// you uncomment its entry in \"web/static/js/app.js\".\n\n// To use Phoenix channels, the first step is to import Socket\n// and connect at the socket path in \"lib/my_app/endpoint.ex\":\nimport {Socket} from \"phoenix\"\n\nlet socket = new Socket(\"/socket\", {params: {token: window.userToken}})\n\n// When you connect, you'll often need to authenticate the client.\n// For example, imagine you have an authentication plug, `MyAuth`,\n// which authenticates the session and assigns a `:current_user`.\n// If the current user exists you can assign the user's token in\n// the connection for use in the layout.\n//\n// In your \"web/router.ex\":\n//\n//     pipeline :browser do\n//       ...\n//       plug MyAuth\n//       plug :put_user_token\n//     end\n//\n//     defp put_user_token(conn, _) do\n//       if current_user = conn.assigns[:current_user] do\n//         token = Phoenix.Token.sign(conn, \"user socket\", current_user.id)\n//         assign(conn, :user_token, token)\n//       else\n//         conn\n//       end\n//     end\n// Now you need to pass this token to JavaScript. You can do so\n// inside a script tag in \"web/templates/layout/app.html.eex\":\n//\n//     <script>window.userToken = \"<%= assigns[:user_token] %>\";</script>\n//\n// You will need to verify the user token in the \"connect/2\" function\n// in \"web/channels/user_socket.ex\":\n//\n//     def connect(%{\"token\" => token}, socket) do\n//       # max_age: 1209600 is equivalent to two weeks in seconds\n//       case Phoenix.Token.verify(socket, \"user socket\", token, max_age: 1209600) do\n//         {:ok, user_id} ->\n//           {:ok, assign(socket, :user, user_id)}\n//         {:error, reason} ->\n//           :error\n//       end\n//     end\n//\n// Finally, pass the token on connect as below. Or remove it\n// from connect if you don't care about authentication.\n\nconst statusToClass = {\n  'green': 'bg-success',\n  'red': 'bg-danger',\n};\n\nconst statNameMap = {\n  'push_queue_length': 'Push queue length',\n  'byte_size': 'Size',\n  'db_fetch_count': 'Query count',\n  'db_fetch_duration': 'Total query duration',\n  'db_fetch_mean_duration': 'Mean query duration',\n};\n\nconst byteSizes = {};\nbyteSizes.b = 1;\nbyteSizes.k = byteSizes.b * 1024;\nbyteSizes.m = byteSizes.k * 1024;\nbyteSizes.g = byteSizes.m * 1024;\nbyteSizes.t = byteSizes.g * 1024;\nbyteSizes.p = byteSizes.t * 1024;\nbyteSizes.e = byteSizes.p * 1024;\nbyteSizes.z = byteSizes.e * 1024;\nbyteSizes.y = byteSizes.z * 1024;\nconst byteSizeNames = ['y', 'z', 'e', 'p', 't', 'g', 'm', 'k', 'b'];\n\nfunction getByteSizeDescription(byteSize) {\n  const byteSizePerKind = byteSizeNames.reduce((acc, val) => {\n    const count = Math.floor(byteSize / byteSizes[val]);\n    acc[val] = count;\n    byteSize = byteSize - (count * byteSizes[val]);\n    return acc;\n  }, {});\n  return byteSizeNames\n    .filter(bsn => byteSizePerKind[bsn])\n    .map(bsn => `${byteSizePerKind[bsn]}${bsn.toUpperCase()}`)\n    .join('+');\n};\n\nfunction getDurationDescription(milliseconds) {\n  const x = new Date(0);\n  x.setTime(x.getTime() + (x.getTimezoneOffset() * 60000));\n  x.setTime(x.getTime() + milliseconds);\n  return [\n    x.getFullYear() != 1970 ? `${x.getFullYear() - 1970}Y` : '',\n    x.getMonth() != 0 ? `${x.getMonth()}M` : '',\n    x.getDate() != 1 ? `${x.getDate() - 1}D` : '',\n    x.getHours() != 0 ? `${x.getHours()}H` : '',\n    x.getMinutes() != 0 ? `${x.getMinutes()}m` : '',\n    x.getSeconds() != 0 ? `${x.getSeconds()}s` : '',\n    x.getMilliseconds() != 0 ? `${x.getMilliseconds()}ms` : '',\n  ].filter(x => x).join('+');\n}\n\nwindow.foo = getDurationDescription;\n\nfunction updateTime() {\n  document.getElementById('time').textContent = new Date().toISOString();\n}\n\nfunction updateStatus(status) {\n  const statusElement = document.getElementById('status');\n  Array.from(statusElement.classList)\n    .filter(klass => /^bg-/.test(klass))\n    .forEach(klass => statusElement.classList.remove(klass));\n  statusElement.classList.add(statusToClass[status.status]);\n\n  const versionElement = document.getElementById('cache-version');\n  const version = (status.heartbeat || {}).version;\n  versionElement.textContent = version ? `v${version}` : '-';\n}\n\nfunction makeCacheRow(cacheName, cache) {\n  const tplt = document\n    .querySelector('[data-template=\"cache-row-template\"]')\n    .cloneNode(true);\n  tplt.removeAttribute('data-template');\n\n  const header = tplt.querySelector('[data-template-role=\"header\"]');\n  header.removeAttribute('data-template-role');\n  header.innerHTML = `${cacheName} (pid: <em>${cache.pid}</em>)`;\n\n  const keys = tplt.querySelector('[data-template-role=\"keys\"]');\n  keys.removeAttribute('data-template-role');\n  Object.keys(cache.keys || {}).forEach(key => {\n    const tr = document.createElement('tr');\n    const tdCacheKey = document.createElement('td');\n    const tdCacheKeyClientsCount = document.createElement('td');\n    tdCacheKey.textContent = key;\n    tdCacheKeyClientsCount.textContent = cache.keys[key];\n    tr.appendChild(tdCacheKey);\n    tr.appendChild(tdCacheKeyClientsCount);\n    keys.appendChild(tr);\n  });\n\n  const stats = tplt.querySelector('[data-template-role=\"stats\"]');\n  keys.removeAttribute('data-template-role');\n  const statKeys = Object.keys(cache.stats || {});\n  statKeys.sort();\n  statKeys.forEach(statKey => {\n    const tr = document.createElement('tr');\n    const tdKey = document.createElement('td');\n    const tdValue = document.createElement('td');\n    tdKey.textContent = statNameMap[statKey];\n    if (statKey === 'byte_size') {\n      tdValue.textContent = getByteSizeDescription(cache.stats[statKey]);\n    } else if (statKey === 'db_fetch_duration' || statKey === 'db_fetch_mean_duration') {\n      tdValue.textContent = getDurationDescription(Math.round(cache.stats[statKey]));\n    } else {\n      tdValue.textContent = cache.stats[statKey];\n    }\n    tr.appendChild(tdKey);\n    tr.appendChild(tdValue);\n    stats.appendChild(tr);\n  });\n\n  return tplt;\n}\n\nsocket.connect()\n\n// Now that you are connected, you can join channels with a topic:\nconst statsChannel = socket.channel(\"stats:all\", null);\n\nstatsChannel\n  .join()\n  .receive(\"ok\", _ => console.log('joined the stats channel successfully'))\n  .receive(\"error\", _ => console.error('unable to join the stats channel'))\n\nstatsChannel.on(\"heartbeat\", heartbeat => {\n  updateTime();\n  updateStatus(heartbeat);\n});\n\nstatsChannel.on(\"stats\", stats => {\n  updateTime();\n\n  const statsFailed = document.getElementById('statsFailed');\n\n  if (stats.status !== 'green') {\n    statsFailed.style.display = '';\n    return;\n  }\n\n  statsFailed.style.display = 'none';\n\n  stats = stats.stats;\n\n  const pushQueueLength = document.getElementById('pushQueueLength');\n  pushQueueLength.textContent = stats.push_queue_length;\n\n  const cacheStatsLayout = {};\n  const cacheNames = Object.keys(stats.caches);\n\n  cacheNames.sort();\n\n  cacheNames.forEach(cacheName => {\n    const cache = stats.caches[cacheName];\n    const statNames = Object.keys(cache);\n    statNames.sort();\n\n    cacheStatsLayout[cacheName] = statNames;\n  });\n\n  const cacheStatsDomElements = [];\n\n  Object.keys(cacheStatsLayout).forEach(cacheName => {\n    const cacheStatsDomElement = makeCacheRow(cacheName, stats.caches[cacheName]);\n    cacheStatsDomElements.push(cacheStatsDomElement);\n  });\n\n  const statsElement = document.getElementById('stats');\n  Array.from(statsElement.children).forEach(child => child.remove());\n  cacheStatsDomElements.forEach(node => {\n    node.style.display = '';\n    statsElement.appendChild(node);\n  });\n});\n\nstatsChannel.push('poll', null);\n\nexport default socket\n"]}